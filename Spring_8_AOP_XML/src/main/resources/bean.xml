<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置Spring的IOC，将service对象配置进来-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>


    <!--Spring中基于XML的AOP配置步骤
            1.把通知Bean也交给Spring管理
            2.使用aop:config标签表明开始AOP的配置
            3.使用aop：aspect标签表明配置切面
                    id属性：给切面提供一个唯一标志
                    ref属性：指定通知类bean的id
            4.在aop：aspect标签的内部使用对应的标签来配置通知的类型
                    此示例是为了让printLog方法在切入点方法执行之前执行，因此为前置通知
                        aop:before ：表示前置通知
                            method属性：用于指定Logger类中哪个方法是前置通知
                            pointcut属性：用于指定切入点表达式，该表达式的涵义指的是对业务层中哪些方法增强

                        切入点表达式写法：
                                关键字：execution(表达式)
                                标准的表达式：
                                        访问修饰符  返回值  包名.包名...类名(参数列表)
                                        public   void   com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                访问修饰符可以省略
                                        void   com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                返回值可以使用通配符，表示任意返回值
                                        * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                包名可以使用通配符，表示任意包，但是有几级包就需要写几个*.
                                        *.*.*.*.*.AccountServiceImpl.saveAccount()
                                包名可以使用..表示当前包及其子包
                                        * *..AccountServiceImpl.saveAccount()
                                类名和方法名都可以使用*实现通配
                                        * *..*.*()
                                参数列表：
                                    可以直接写数据类型：
                                        基本类型直接写名称           int
                                        引用类型写包名.类名的方式   java.lang.String
                                    可以使用通配符表示任意类型，但必须有参数
                                    可以使用..表示有无参数均可，有参数可以是任意类型
                                全通配写法：
                                        * *..*.*(..)

                                实际开发中切入点表达式的通常写法：
                                        切到业务层实现类下的所有方法
                                            * com.itheima.service.impl.*.*(..)
    -->

    <!--配置Logger类-->
    <bean id="logger" class="com.itheima.utils.Logger" ></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger" >
            <!--配置切入点表达式   id属性用于指定表达式的唯一标识     expression用于指定表达式内容
               此标签写在aop:aspect标签内部只能在当前切面使用；
               当此标签写在aop:aspect标签外部时，表示所有切面可用-->
            <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"/>

            <!--配置通知类型，且建立通知方法和切入点方法的关联-->

            <!--&lt;!&ndash;前置通知：在切入点方法执行之前执行 &ndash;&gt;
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>
            &lt;!&ndash;后置通知：在切入点方法正常执行之后执行     与异常通知永远只能执行一个&ndash;&gt;
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>
            &lt;!&ndash;异常通知：在切入点方法出现异常后执行      与后置通知永远只能执行一个&ndash;&gt;
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            &lt;!&ndash;最终通知：无论切入点方法是否正常执行它都会在其后执行&ndash;&gt;
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->

            <!--配置环绕通知      详细注释在log类中-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>

        </aop:aspect>

    </aop:config>
</beans>